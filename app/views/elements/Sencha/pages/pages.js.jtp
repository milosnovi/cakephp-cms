Ext.namespace('CP');

CP.Pages = function() {
	return {
		getNavigationItems: function() {
			return new Ext.tree.TreePanel({
	    		id: 'Navigation.MenuTree',
				border: false,
		        autoScroll: true,
		        animate: true,
		        enableDD: true,
		        containerScroll: true,
		        autoHeight: true,
		        draggedElement: false,
		        draggedNode: false,
		        targetNode: false,
		        loader: new Ext.tree.TreeLoader({
		        	dataUrl: '/inkoplan/admin/menuitems/get_nodes',
		        	preloadChildren: true
		    	}),
		    	dropConfig:{
//					allowContainerDrop:true
				},
		        rootVisible: false,
		        /*selModel: new Ext.tree.DefaultSelectionModel({
					listeners: {
						beforeselect: function (sm, newSelectionNode, oldSelectionModel) {
							return !newSelectionNode.parentNode.isRoot;
						}
					}
				}),*/
		        root: {
		            nodeType: 'async',
		            text: 'Root',
		            allowDrag: false,
					allowDrop: false,
		            id: 'src'
		        },
		        contextMenu: new Ext.menu.Menu({
		            items: [{
			                id: 'add-item',
			                text: 'Add menuitem'
			            },{
		                	id: 'delete-item',
		                	text: 'Delete menuitem'
		            	},{
	            			id: 'rename-item',
	            			text: 'Rename menuitem'
		            }],
		            listeners: {
		                itemclick: function(item) {
		                	var editNodeData = item.parentMenu.contextNode.attributes;
		                	console.log(editNodeData);
		                    switch (item.id) {
		                        case 'rename-item': {
		                        	var windowRenameNewPage = new Ext.Window({
		                				id: 'Pages.Window.RenameNewPage',
		                				title: "<?__('Edit page')?>",
		                				width: 400,
		                				autoHeight: true,
		                				modal: true,
		                				plain: true,
		                				resizable: false,
		                				buttonAlign: 'center',
		                				constrainHeader: true,
		                				items: [
		                					new Ext.form.FormPanel({
				        	        			id: 'RenamePageFormDashboard',
				        	        			autoHeight: true,
				        	        			border: true,
		//		        			        	baseCls: 'x-plain',
				        			        	items: [
													new Ext.form.FieldSet({
														border: false,
														labelWidth: 100,
														bodyStyle: 'padding: 5px',
														items: [{
																xtype: 'hidden',
																value: editNodeData.id,
													    		name: '<?=MF2D(Menuitem::Id)?>'
															},
																new Ext.form.TextField({
																	fieldLabel: 'Page name',
																	anchor: '95%',
																	value: editNodeData.menuitem_title,
														    		name: '<?=MF2D(Menuitem::T_Title)?>'
																})
														   ]
														})
				        		    	        ],
				        	        			buttons: [{
				        							id: 'RenamePageFormDashboard.EditPageForm.Save',
				        							text: "<?__('Save')?>",
				        							handler: function () {
				        				        		Ext.getCmp('RenamePageFormDashboard').getForm().submit({
				        									url: '/inkoplan/admin/menuitems/rename_page/',
				        									msgBoxTitle: "<?__('Creating page')?>",
				        									success: function(form, action) {
				        						    			if (action.result.success) {
				        						    				Ext.getCmp('Navigation.MenuTree').getRootNode().reload();
				        						    				if ('CUSTOM' != action.result.<?=PAGE?>.<?=Menuitem::T_ContentType?>) {
				        						    					CP.Pages.showEditPageForm(action.result.<?=PAGE?>);
				        						    				}
				        						    				windowRenameNewPage.close();
				        						    			}
				        									}
				        								});
				        			        		}
			        							},{
			        								id: 'PagesDashboard.EditPageForm.Close',
				        							text: "<?__('Close')?>",
				        							handler: function () {
				        								windowRenameNewPage.close();
				        			        		}
			        							}]
		                					})
	                					]
		                        	});
		                        	windowRenameNewPage.show();
		                            break;
		                        }
		                        case 'delete-item': {
		                        	var n = item.parentMenu.contextNode;
		                            if (n.parentNode) {
		                                n.remove();
		                            }
		                        }
		                    }
		                }
		            }
		        }),
		        listeners: {
		        	startdrag: function(tree, node, event) {//-1
		        	/*console.log('startDrag');*/
						tree.draggedElement = Ext.get(tree.dragZone.getDragEl());
					},
		        	nodedragover: function(dragOverEvent) {//0
						var dropNode = dragOverEvent.dropNode.attributes;
		        		var targetNode = dragOverEvent.target.attributes;
		        		
//		        		var dropNodeContentType = dragOverEvent.target.attributes.content_type;
//		        		var enableDrop = 'ROOT' != dropNodeContentType;
		        		
						var reorderInsideOrphan = !Ext.isEmpty(dropNode.orhpan_page) && !Ext.isEmpty(targetNode.orhpan_page); 
						var moveToParentNode = targetNode.id == dragOverEvent.dropNode.parentNode.attributes.id;
						var allowDrop = !reorderInsideOrphan && !moveToParentNode;
						return allowDrop;
		        	},
		        	beforenodedrop: function(dropEvent) {//1
		        		return true;
		        	},
		        	nodedrop: function (dropEvent) {//2
		        		/*console.log('dropEvent');
		        		console.log(dropEvent);*/
		        		
		        		var dropNode = dropEvent.dropNode;
		        		var targetNode = dropEvent.target;
		        		
		        		dropEvent.tree.draggedNode = dropNode;
		        		dropEvent.tree.targetNode = targetNode;
		        		
						Ext.Ajax.request({
							url: '/inkoplan/admin/menuitems/reorder_nodes',
							params: {
								'dropPoint':  			dropEvent.point,
								
								'dropMenuitemId': 		Ext.isEmpty(dropNode.attributes.orhpan_page) ? dropNode.attributes.id : null,
								'dropPageId':  			dropNode.attributes.content_id,
								'dropMenuType': 		((dropNode.attributes.menu_type == '<?=Menuitem::TypeMain?>') || (dropNode.attributes.menu_type == '<?=Menuitem::TypeSide?>')) ? dropNode.attributes.menu_type : null,
								'dropParentId': 		!Ext.isEmpty(dropNode.attributes.parent_id) ? dropNode.attributes.parent_id : null,
								
								'targetMenuitemId':  	Ext.isEmpty(targetNode.attributes.orhpan_page) ? targetNode.attributes.id : null,
								'targetPageId':  		targetNode.attributes.content_id,
								'targetMenuType': 		((targetNode.attributes.menu_type == '<?=Menuitem::TypeMain?>') || (targetNode.attributes.menu_type == '<?=Menuitem::TypeSide?>')) ? targetNode.attributes.menu_type : null,
								'targetParentId': 		!Ext.isEmpty(targetNode.attributes.parent_id) ? targetNode.attributes.parent_id : null
								
							},
							msgBoxTitle: "<?__('Opening page')?>",
							success: function(response, options) {
								Ext.getCmp('Navigation.MenuTree').getRootNode().reload();
							}
						});
		        	},
/*		        	dragdrop : function(tree, node, dd, e ) {//3
		        		console.log('dragDrop');
		        		if ('undefined' != typeof(tree.selectedNode)) {
			        		Ext.getCmp('Navigation.MenuTree').getSelectionModel().clearSelections();
			        		Ext.getCmp('Navigation.MenuTree').getSelectionModel().select(tree.selectedNode);
		        		}
		        	},
*/
		        	enddrag : function(tree, node, e ) {//4
		        		tree.draggedElement = false;
		        	},
		        	click: function(node) {
		        		Ext.getCmp('toolbar.buttondeleteMenuitem').enable();
		        		if (!node.attributes.rootMenu) {
			        		if ('CUSTOM' == node.attributes.content_type) {
		        				Ext.MessageBox.show({
		        					title: 'Warning message',
		        					msg: 'This page can\'t be edited. Please contact administrator for further information!',
		        					buttons: Ext.MessageBox.OK,
		        					icon: Ext.MessageBox.WARNING
		        				});
			        		} else {
			        			CP.Pages.openCenterPanel(node.attributes.content_id);
			        		}
		        		}
		        	},
		            contextmenu: function(node, e) {
	            		//Register the context node with the menu so that a Menu Item's handler function can access
	            		//it via its parentMenu property.
		                node.select();
		                var c = node.getOwnerTree().contextMenu;
		                c.contextNode = node;
		                c.showAt(e.getXY());
	            	}
		        }
		    });
		},
		getDashboard: function() {
			return new Ext.Panel({
	        	title: "<?__('Dashboard')?>",
	        	border: true,
	        	margin: '5px',
    	        padding: '5px',
	        	items: [
	        		new Ext.form.FormPanel({
	        			id: 'AddPageFormDashboard',
	        			autoHeight: true,
	        			border: true,
	        	        title: "<?__('Create new page')?>",
			        	width: 350,
//			        	baseCls: 'x-plain',
			        	items: [
			        	     CP.Pages.createNewPageForm()
		    	        ],
		    	        buttons: [{
							id: 'PagesDashboard.AddPageForm.Save',
							text: "<?__('Save')?>",
							handler: function () {
				        		Ext.getCmp('AddPageFormDashboard').getForm().submit({
									url: '/inkoplan/admin/pages/create_page/',
									msgBoxTitle: "<?__('Creating page')?>",
									success: function(form, action) {
						    			if (action.result.success) {
						    				Ext.getCmp('Navigation.MenuTree').getRootNode().reload();
						    				CP.Pages.showEditPageForm(action.result.<?=PAGE?>);
						    			}
									}
								});
			        		}
						}]
	        		})
	        	]	
	        });
		},
		createNewPageForm: function() {
			return new Ext.form.FieldSet({
				border: false,
				labelWidth: 100,
				bodyStyle: 'padding: 5px',
				items: [{
	        			xtype: 'field',
	        			fieldLabel: 'Page name',
	        			anchor: '95%',
		        		name: '<?=MF2D(Page::T_Title)?>'
		    		},{
			        	xtype: 'combo',
						name: '<?=MF2D(Menuitem::A_T_MainMenu)?>',
						hiddenName: '<?=MF2D(Menuitem::A_T_MainMenu)?>',
						fieldLabel: "<?__('Menu')?>",
						anchor: '95%',
						mode: 'local',
						store: new Ext.data.SimpleStore({
							fields: ['isMain', 'MenuName'],
							data: [
						       [1, "<?__('Main menu')?>"],
						       [0, "<?__('Side menu')?>"]
							]
						}),
						displayField: 'MenuName',
						valueField: 'isMain',
						editable: false,
						triggerAction: 'all'
			       },
	        	   new Ext.form.Checkbox({
						boxLabel: 'Publish page',
						hideLabel: true,
						name: '<?=MF2D(Menuitem::T_Visible)?>',
						inputValue: 1
					})
		       ]
		    });
		},
		createNewPageWindow: function() {
			var windowCreateNewPage = new Ext.Window({
				id: 'Pages.Window.CreateNewPage',
				title: "<?__('Add page')?>",
				width: 400,
				autoHeight: true,
				modal: true,
				plain: true,
				resizable: false,
				buttonAlign: 'center',
				constrainHeader: true,
				items:
					new Ext.form.FormPanel({
						id: 'Menuitems.addNewpage',
						autoHeight: true,
						border: false,
						items:[
					      CP.Pages.createNewPageForm()
				       ]
					})
			    ,buttons: [{
					id: 'Pages.formPage.AddPageForm.Save',
					text: "<?__('Save')?>",
					handler: function () {
		        		Ext.getCmp('Menuitems.addNewpage').getForm().submit({
							url: '/inkoplan/admin/pages/create_page/',
							msgBoxTitle: "<?__('Creating page')?>",
							success: function(form, action) {
				    			if (action.result.success) {
				    				windowCreateNewPage.close();
				    				Ext.getCmp('Navigation.MenuTree').getRootNode().reload();
				    				CP.Pages.showEditPageForm(action.result.<?=PAGE?>);
				    			}
							}
						});
	        		}
				},{	
					text: 'Close',
					handler: function() {
						windowCreateNewPage.close();
					}	
				}]
			});
			return windowCreateNewPage;
		},
		openCenterPanel: function(pageId) {
			if (Ext.isEmpty(pageId)) {
				CP.Layout.global.fireEvent('showInCenter', CP.Pages.getDashboard());
			} else {
				Ext.Ajax.request({
					url: '/inkoplan/admin/pages/form/' + pageId,
					msgBoxTitle: "<?__('Opening page')?>",
					success: function(response, options) {
		    			CP.Pages.showEditPageForm(Ext.decode(response.responseText));
					}
				});
			}
		},
		showEditPageForm: function(pageData) {
			textArea = CKEDITOR.instances.inputTextarea;
			if (Ext.isEmpty(textArea) || Ext.isEmpty(Ext.getCmp('Pages.MainCenterPanel'))) {
				if (!Ext.isEmpty(textArea) && CKEDITOR.instances['inputTextarea']) {
					CKEDITOR.remove(CKEDITOR.instances.inputTextarea);
//					CKEDITOR.instances['inputTextarea'].destroy();
				}
				
		        var pagesContent = new Ext.Panel({
		        	id: 'Pages.MainCenterPanel',
		        	border: true,
//					autoScroll: false,
		        	autoHeight: true,
		        	title: pageData.<?=Page::T_Title?>,
		        	tbar: [{
	        			xtype: 'tbbutton',
	    	            text: "<?__('Delete page')?>",
	    	            iconCls: 'pages-delete',
	    	            handler: function() {
		        			var selectionNode = Ext.getCmp('Navigation.MenuTree').getSelectionModel().getSelectedNode().attributes;
		        			Ext.Ajax.request({
//		        				url: '/inkoplan/admin/pages/delete_page/' + pageData.<?=Page::Id?>,
	    	    				url: '/inkoplan/admin/pages/delete_page/' + Ext.getCmp('Pages.formPage.panelContent.pageId').getValue(),
	    	    				msgBoxTitle: "Deleting page",
	    	    				success: function(response, options) {
	    	    					Ext.getCmp('Navigation.MenuTree').getRootNode().reload();
	    	    				}
	    	    			});
	        			}
	    	        },{
	    	        	xtype: 'tbbutton',
	    	            text: "<?__('Reload')?>",
	    	            iconCls: 'refresh-button-icon',
	    	            handler: function() {
	    	        		pageId = Ext.get('Pages.formPage.panelContent.pageId').getValue();
	    	            	Ext.Ajax.request({
	    	    				url: '/inkoplan/admin/pages/form/' + pageId,
	    	    				msgBoxTitle: "Reloading page",
	    	    				success: function(response, options) {
	    	    	    			CP.Pages.showEditPageForm(Ext.decode(response.responseText));
	    	    				}
	    	    			});
	    	            }
	    	        }],
		        	items:[
	    	       		new Ext.form.FormPanel({
							id: 'Pages.formPage',
							border: false,
							labelAlign: 'top',
							labelWidth: 100,
							width: 750,
							autoHeight: true,
							style: 'padding: 10px',
							items:[{
									id: 'Pages.formPage.panelContent.pageId',
									name: "<?=MF2D(Page::Id)?>",
									xtype: 'hidden',
									value: pageData.<?=Page::Id?>
								},
								new Ext.form.FieldSet({
									border: false,
//									autoScroll: true,
									width: 735,
									items:[
						        	   new Ext.form.TextField({
						        		   id: 'Pages.title',
						        		   name: '<?=MF2D(Page::T_Title)?>',
						        		   fieldLabel: 'Page name',
						        		   anchor: '100%',
						        		   value: pageData.<?=Page::T_Title?>
						        	   }),
					        	       new Ext.form.TextArea({
							        		id: 'inputTextarea',
							        		name: '<?=MF2D(Page::T_Content)?>',
							        		width: 720,
							        		height: 400,
							        		value: pageData.<?=Page::T_Content?>,
							        		listeners: {
							        			afterrender: function(content) {
						        					CKEDITOR.replace(this.id, {
														filebrowserBrowseUrl : '/inkoplan/js/ckfinder/ckfinder.html',
														filebrowserImageBrowseUrl : '/inkoplan/js/ckfinder/ckfinder.html?type=Images',
														filebrowserUploadUrl : '/inkoplan/js/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Files&currentFolder=/xxx',
														filebrowserImageUploadUrl : '/inkoplan/js/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Images&currentFolder=/xxx',
						        						/*toolbar: [ 
				        						           ['NewPage','Preview'],
					        						           ['Cut','Copy','Paste','PasteText','PasteFromWord','-','Scayt'],
					        						           ['Undo','Redo','-','Find','Replace','-','SelectAll','RemoveFormat'],
					        						           ['Image','Flash','Table','HorizontalRule','Smiley','SpecialChar','PageBreak'],
					        						           '/',
					        						           ['Styles','Format'],
					        						           ['Bold','Italic','Strike'],
					        						           ['NumberedList','BulletedList','-','Outdent','Indent','Blockquote'],
					        						           ['Link','Unlink','Anchor'],
					        						           ['Maximize','-','About']
							        					]*/}
							        				);
							        			}
							        		}
					        	       
					        	       })]
									})
								],
								buttons: [{
									id: 'Pages.formPage.panelContent.buttonSaveAndPublish',
									text: 'Save',
									handler: function () {
										Ext.getCmp('inputTextarea').setValue(CKEDITOR.instances.inputTextarea.getData());
										Ext.getCmp('Pages.formPage').getForm().submit({
											url: '/inkoplan/admin/pages/form',
											msgBoxTitle: "<?__('Saving page')?>",
											success: function(form, action) {
												
											}
										});
									}
								},{
									text: 'Close',
									handler: function() {
									
									}
								}]
							})
				     ]
		        });
		        CP.Layout.global.fireEvent('showInCenter', pagesContent);
			} else {
				var textArea = CKEDITOR.instances.inputTextarea;
				textArea.setData(pageData.<?=Page::T_Content?>);
				
				Ext.getCmp('Pages.title').setValue(pageData.<?=Page::T_Title?>);
				Ext.getCmp('Pages.formPage.panelContent.pageId').setValue(pageData.<?=Page::Id?>);
				Ext.getCmp('Pages.MainCenterPanel').setTitle(pageData.<?=Page::T_Title?>);
			}
	        
		}
	}
}();